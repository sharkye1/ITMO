# Это программа для конвертации числа из десятичной системы в симметричную систему с основанием n.
# Симметричная значит, что цифры могут быть отрицательными, от -floor(n/2) до floor(n/2).
# Для отрицательных цифр используем обозначение {^k}, где k - абсолютное значение.
# Программа работает через консоль, принимает число и основание n.
# Добавил обработку ошибок, чтобы не ломалась от фигни вроде нечислового ввода или деления на 0.

def to_symmetric_base(num, base):
    # Функция для конвертации числа num в симметричную систему с основанием base.
    if base < 3:  # Минимальное основание для симметричной - 3, иначе не имеет смысла.
        raise ValueError("Основание должно быть не меньше 3.")
    
    if num == 0:
        return "0"  # Если число 0, то и в любой системе 0.
    
    digits = []  # Список для хранения цифр.
    is_negative = num < 0  # Запоминаем, если число отрицательное, но в симметричной отрицательные выражаются через цифры.
    num = abs(num)  # Работаем с абсолютным значением, знак учтем позже? На самом деле в симметричной нет отдельного знака, отрицательные через отрицательные цифры.
    # Ошибка: в симметричной системе числа могут быть отрицательными без знака, алгоритм работает для положительных и отрицательных одинаково.
    # Так что не нужно abs, алгоритм сам справится с отрицательными num.
    
    # Исправляю: убираю abs и is_negative, потому что алгоритм работает для любых int.
    num_original = num  # Для отладки, но не нужно.
    
    while num != 0:
        remainder = num % base  # Остаток от деления.
        num = num // base  # Целочисленное деление.
        
        # В симметричной, если остаток больше floor(base/2), корректируем.
        half_base = base // 2
        if remainder > half_base:
            remainder -= base
            num += 1
        
        digits.append(remainder)  # Добавляем цифру в список.
    
    # Теперь переворачиваем список, потому что собирали с конца.
    digits.reverse()
    
    # Преобразуем в строку с обозначениями.
    result = ""
    for d in digits:
        if d < 0:
            result += "{^" + str(-d) + "}"  # Для отрицательных: {^k}
        else:
            result += str(d)
    
    return result

# Основная часть программы.
try:
    # Ввод числа.
    input_num = input("Введите число в десятичной системе: ")
    num = int(input_num)  # Пытаемся преобразовать в int.
    
    # Ввод основания.
    input_base = input("Введите основание n для симметричной системы (например, 9): ")
    base = int(input_base)  # Пытаемся в int.
    
    # Вызываем функцию.
    result = to_symmetric_base(num, base)
    
    # Выводим результат.
    print("Число в симметричной системе с основанием", base, ":", result)

except ValueError as ve:
    # Если ошибка в преобразовании или в функции (например, base < 3).
    print("Ошибка: неверный ввод. Убедитесь, что ввели целые числа и основание >= 3.", ve)
    
except ZeroDivisionError:
    # На случай если base=0, но int(input) не даст, но если base=0 в % или // - ошибка.
    print("Ошибка: основание не может быть 0.")
    
except Exception as e:
    # Любая другая фигня.
    print("Неизвестная ошибка:", e)

# Конец программы. Можно запускать в консоли python this_file.py